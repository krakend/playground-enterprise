(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[656],{8415:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/use-cases/travel",function(){return t(7108)}])},7108:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return a}});var r=t(5893),s=t(1644),i=t(6654);let o=function(e){let{children:n}=e;return(0,r.jsx)(i.Z,{children:n})};function c(e){let n={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/travel\n"})}),"\n",(0,r.jsx)(n.h2,{children:"gRPC to REST conversion"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{src:"https://www.krakend.io/images/documentation/grpc.dark.png",alt:"gRPC to REST"}),"\nThe ",(0,r.jsx)(n.code,{children:"/travel"})," endpoint connects to two different gRPC services returning flights and trains information. It takes care of data remapping and transformation and it merges the responses from the two services together, returning it as a REST API."]}),"\n",(0,r.jsx)(n.p,{children:"A use case like this simplifies the consumption of internal gRPC services to end-users who don't need to deal with Protobuff.d is unreachable."}),"\n",(0,r.jsxs)(n.p,{children:["Test it: ",(0,r.jsx)(n.a,{href:"http://localhost:8080/travel",children:"http://localhost:8080/travel"})]}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"https://www.krakend.io/docs/enterprise/backends/grpc/",children:"gRPC to REST documentation"})]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,r.jsx)(o,{...e,children:(0,r.jsx)(c,{...e})})}}},function(e){e.O(0,[2675,182,8535,4544,2888,9774,179],function(){return e(e.s=8415)}),_N_E=e.O()}]);