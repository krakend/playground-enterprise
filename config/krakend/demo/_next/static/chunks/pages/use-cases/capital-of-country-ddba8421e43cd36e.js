(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9675],{1558:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/use-cases/capital-of-country",function(){return n(4386)}])},4386:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var s=n(5893),o=n(1644),r=n(8563),a=n(8113);let i=function(e){let{children:t}=e;return(0,s.jsx)(r.Z,{children:t})};function c(e){let t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Endpoint"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-http",children:"/starwars_films/{movie_id}\n"})}),"\n",(0,s.jsx)(t.h2,{children:"SOAP to REST"}),"\n",(0,s.jsx)(t.p,{children:"This use case demonstrates exposing a SOAP backend as a regular REST API. API users don't realize they are consuming a SOAP service."}),"\n",(0,s.jsx)(t.p,{children:"There are two things to have in mind in this example"}),"\n",(0,s.jsx)(t.h2,{children:"Request transformation"}),"\n",(0,s.jsxs)(t.p,{children:["When the user sends a request like ",(0,s.jsx)(t.code,{children:"GET /capital-of/FR"}),", the gateway needs to convert this request into an XML body using a POST method. The configuration ",(0,s.jsx)(t.code,{children:"backend/soap"})," takes care of this by specifying a template that writes the XML body. It is located under ",(0,s.jsx)(t.code,{children:"/extended/templates/soap_request_capital_city.tmpl.xml"})," and looks like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">\n  <soap:Body>\n    <CapitalCity xmlns="http://www.oorsprong.org/websamples.countryinfo">\n      <sCountryISOCode>{{ .req_params.Country }}</sCountryISOCode>\n    </CapitalCity>\n  </soap:Body>\n</soap:Envelope>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The gateway replaces the variable ",(0,s.jsx)(t.code,{children:"{{ .req_params.Country }}"})," with the endpoint parameter, like ",(0,s.jsx)(t.code,{children:"FR"})," for France."]}),"\n",(0,s.jsx)(t.h2,{children:"Response transformation"}),"\n",(0,s.jsxs)(t.p,{children:["As no ",(0,s.jsx)(t.code,{children:"output_encoding"})," exists, the gateway will default to its JSON response, which is transformed on the fly. In addition, the ",(0,s.jsx)(t.code,{children:"target"})," attribute selects the ",(0,s.jsx)(t.code,{children:"CapitalCityResponse"})," from the XML, and then with ",(0,s.jsx)(t.code,{children:"mapping"}),", it renames it to ",(0,s.jsx)(t.code,{children:"capital"}),". Because XML has extra attributes we don't want to have in the response, like'- m`, we ban them from the response."]}),"\n",(0,s.jsx)(t.p,{children:"Test this endpoint with the two-letter code of a country:"}),"\n",(0,s.jsx)(a.Z,{endpoint:"http://localhost:8080/capital-of/",placeholder:"FR"}),"\n",(0,s.jsxs)(t.p,{children:["See the ",(0,s.jsx)(t.a,{href:"https://www.krakend.io/docs/enterprise/backends/soap/",children:"SOAP documentation"})," for more details."]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})})}},8113:function(e,t,n){"use strict";var s=n(5893),o=n(7294);t.Z=e=>{let{endpoint:t,placeholder:n,helpText:r}=e,a=(0,o.useRef)(null),[i,c]=(0,o.useState)("Copy"),[l,d]=(0,o.useState)(!1);return(0,s.jsxs)("div",{className:"not-prose",children:[(0,s.jsxs)("div",{className:"bg-white py-2 px-4 rounded-md flex flex-col sm:flex-row sm:items-center sm:justify-between",onClick:()=>{a.current&&a.current.focus()},children:[(0,s.jsxs)("div",{className:"flex text-brand-neutral-600 w-9/12",children:[(0,s.jsx)("p",{children:t||""}),(0,s.jsx)("input",{ref:a,type:"text",placeholder:n,className:"focus:outline-none w-full"})]}),(0,s.jsx)("button",{className:"bg-brand-neutral-900 text-white rounded-md px-6 py-2 mt-4 sm:mt-0 ".concat(l?"bg-blue-500":""),onClick:()=>{var e;let n=(null===(e=a.current)||void 0===e?void 0:e.value)||"",s="".concat(t).concat(n);navigator.clipboard.writeText(s).then(()=>{c("Copied!"),d(!0),setTimeout(()=>{c("Copy"),d(!1)},2e3)}).catch(e=>{console.error("Failed to copy:",e)})},children:i})]}),r&&(0,s.jsx)("small",{className:"mt-2 text-sm font-normal",children:r})]})}}},function(e){e.O(0,[9814,2681,182,6103,2888,9774,179],function(){return e(e.s=1558)}),_N_E=e.O()}]);